const counterstakeAbi = [
	'event FinishedClaim(uint256 indexed claim_num, uint8 outcome)',
	'event NewChallenge(uint256 indexed claim_num, address author_address, uint256 stake, uint8 outcome, uint8 current_outcome, uint256 yes_stake, uint256 no_stake, uint32 expiry_ts, uint256 challenging_target)',
	'event NewClaim(uint256 indexed claim_num, address author_address, string sender_address, address recipient_address, string txid, uint32 txts, uint256 amount, int256 reward, uint256 stake, string data, uint32 expiry_ts)',
	'function claim_nums(string) view returns (uint256)',
	'function governance() view returns (address)',
	'function last_claim_num() view returns (uint64)',
	'function num2index(uint256) view returns (uint256)',
	'function ongoing_claim_nums(uint256) view returns (uint64)',
	'function settings() view returns (address tokenAddress, uint16 ratio100, uint16 counterstake_coef100, uint32 min_tx_age, uint256 min_stake, uint256 large_threshold)',
	'function stakes(uint256, uint8, address) view returns (uint256)',
	'function getClaim(string claim_id) view returns (tuple(uint256 amount, address recipient_address, uint32 txts, uint32 ts, address claimant_address, uint32 expiry_ts, uint16 period_number, uint8 current_outcome, bool is_large, bool withdrawn, bool finished, string sender_address, string data, uint256 yes_stake, uint256 no_stake))',
	'function getClaim(uint256 claim_num) view returns (tuple(uint256 amount, address recipient_address, uint32 txts, uint32 ts, address claimant_address, uint32 expiry_ts, uint16 period_number, uint8 current_outcome, bool is_large, bool withdrawn, bool finished, string sender_address, string data, uint256 yes_stake, uint256 no_stake))',
	'function getOngoingClaimNums() view returns (uint64[])',
	'function initCounterstake(address _tokenAddr, uint16 _counterstake_coef100, uint16 _ratio100, uint256 _large_threshold, uint256[] _challenging_periods, uint256[] _large_challenging_periods)',
	'function validateRatio(uint256 _ratio100) pure',
	'function setRatio(uint256 _ratio100)',
	'function validateCounterstakeCoef(uint256 _counterstake_coef100) pure',
	'function setCounterstakeCoef(uint256 _counterstake_coef100)',
	'function validateMinStake(uint256 _min_stake) pure',
	'function setMinStake(uint256 _min_stake)',
	'function validateMinTxAge(uint256 _min_tx_age) pure',
	'function setMinTxAge(uint256 _min_tx_age)',
	'function validateLargeThreshold(uint256 _large_threshold) pure',
	'function setLargeThreshold(uint256 _large_threshold)',
	'function validateChallengingPeriods(uint256[] periods) pure',
	'function setChallengingPeriods(uint256[] _challenging_periods)',
	'function setLargeChallengingPeriods(uint256[] _large_challenging_periods)',
	'function getChallengingPeriod(uint16 period_number, bool bLarge) view returns (uint256)',
	'function getRequiredStake(uint256 amount) view returns (uint256)',
	'function getMissingStake(uint256 claim_num, uint8 stake_on) view returns (uint256)',
	'function claim(string txid, uint32 txts, uint256 amount, int256 reward, uint256 stake, string sender_address, address recipient_address, string data) payable',
	'function challenge(uint256 claim_num, uint8 stake_on, uint256 stake) payable',
	'function challenge(string claim_id, uint8 stake_on, uint256 stake) payable',
	'function withdraw(uint256 claim_num, address to_address)',
	'function withdraw(uint256 claim_num)',
	'function withdraw(string claim_id)',
	'function withdraw(string claim_id, address to_address)'
];

module.exports = {
	counterstakeAbi,
}
